/////////////////////////////////////////////////////////////////
//
//  Practice_11_19_14 - camera
//
//  MessRenderer - A very messy renderer
//
//  Copyright (c) 2016 Bella Q
//  
/////////////////////////////////////////////////////////////////

#pragma once
#include "Utl_Include.h"

/////////////////////////////////////////////////////////////////
//
//  Camera Base
//  
/////////////////////////////////////////////////////////////////
class CCamera {
public:
	CCamera();
	virtual ~CCamera();

protected:
    /////////////////////////////////////////////////////////////////
    //
    //  camera position
    //  
    /////////////////////////////////////////////////////////////////
	vec4 _pos;
    /////////////////////////////////////////////////////////////////
    //
    //  camera aiming point
    //  
    /////////////////////////////////////////////////////////////////
    vec4 _aim;


public:
    void Setup( const vec4& t_pos, const vec4& t_aim );

    vec4 GetPos() { return _pos; }
    vec4 GetAiming() { return _aim; }
    vec4 GetFacing() { return glm::normalize( _aim - _pos ); }
};


/////////////////////////////////////////////////////////////////
//
//  Freefly Camera
//  
/////////////////////////////////////////////////////////////////
class CFreeFlyCamera : public CCamera {
public:
    CFreeFlyCamera() {}
    virtual  ~CFreeFlyCamera() {}

private:


public:
    void Update( double t_delta );
    
	/////////////////////////////////////////////////////////////////
	//
	//  Update camera controls
	//  Put this after GLFW_PollEvents
	//  
	/////////////////////////////////////////////////////////////////
	void UpdateControl( double t_delta );
};



